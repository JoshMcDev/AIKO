import Foundation
import SwiftUI

// MARK: - Enhanced Confidence-Based Auto-Fill System (Phase 4.2)

// Government Form Auto-Population Integration

extension ConfidenceBasedAutoFillEngine {
    // MARK: - Government Form Enhanced Configuration

    /// Enhanced configuration for government form processing
    public struct GovernmentFormConfiguration {
        /// Threshold for auto-filling government critical fields (lower than regular)
        public let governmentCriticalThreshold: Float

        /// Validation patterns for government-specific fields
        public let validationPatterns: GovernmentValidationPatterns

        /// Required fields for specific government forms
        public let requiredFieldsByForm: [FormType: Set<RequirementField>]

        /// Time reduction targets for performance measurement
        public let timeReductionTarget: Double // 0.7 = 70% reduction

        public init(
            governmentCriticalThreshold: Float = 0.75, // Lower threshold for critical gov fields
            validationPatterns: GovernmentValidationPatterns = GovernmentValidationPatterns(),
            requiredFieldsByForm: [FormType: Set<RequirementField>] = [:],
            timeReductionTarget: Double = 0.7
        ) {
            self.governmentCriticalThreshold = governmentCriticalThreshold
            self.validationPatterns = validationPatterns
            self.requiredFieldsByForm = requiredFieldsByForm
            self.timeReductionTarget = timeReductionTarget
        }
    }

    /// Government-specific validation patterns
    public struct GovernmentValidationPatterns: Sendable {
        public let cageCodePattern: String
        public let ueiPattern: String
        public let contractNumberPattern: String
        public let currencyPattern: String
        public let datePattern: String

        public init(
            cageCodePattern: String = "^[A-Z0-9]{5}$",
            ueiPattern: String = "^[A-Z0-9]{12}$",
            contractNumberPattern: String = "^[A-Z0-9\\-\\.]{6,20}$",
            currencyPattern: String = "^\\$[\\d,]+\\.?\\d{0,2}$",
            datePattern: String = "^(0?[1-9]|1[0-2])[/\\-](0?[1-9]|[12]\\d|3[01])[/\\-]\\d{4}$"
        ) {
            self.cageCodePattern = cageCodePattern
            self.ueiPattern = ueiPattern
            self.contractNumberPattern = contractNumberPattern
            self.currencyPattern = currencyPattern
            self.datePattern = datePattern
        }
    }

    // MARK: - Government Form Auto-Fill Methods

    /// Analyze government form fields for auto-population with enhanced thresholds
    public func analyzeGovernmentFormFields(
        fields: [RequirementField],
        context: SmartDefaultContext,
        formType: FormType = .sf1449,
        governmentConfig: GovernmentFormConfiguration = GovernmentFormConfiguration()
    ) async -> GovernmentFormAutoFillResult {
        let startTime = Date()

        // Get smart defaults with government context
        let defaults = await smartDefaultsEngine.getSmartDefaults(for: fields, context: context)

        // Enhanced decision making for government forms
        var decisions: [GovernmentAutoFillDecision] = []
        for field in fields {
            if let defaultValue = defaults[field] {
                let decision = makeGovernmentAutoFillDecision(
                    field: field,
                    defaultValue: defaultValue,
                    context: context,
                    formType: formType,
                    config: governmentConfig
                )
                decisions.append(decision)
            } else {
                decisions.append(GovernmentAutoFillDecision(
                    field: field,
                    action: .skip,
                    value: "",
                    confidence: 0,
                    reasoning: "No default value available",
                    validationStatus: .unknown,
                    isCriticalField: isGovernmentCriticalField(field, formType: formType)
                ))
            }
        }

        // Apply government-specific limits and validation
        let validatedDecisions = validateAndFilterGovernmentDecisions(decisions, config: governmentConfig)

        // Build enhanced result
        let result = buildGovernmentAutoFillResult(
            from: validatedDecisions,
            formType: formType,
            startTime: startTime,
            config: governmentConfig
        )

        // Update government-specific metrics
        updateGovernmentMetrics(with: result)

        return result
    }

    /// Process user feedback for government form fields with enhanced learning
    public func processGovernmentFormFeedback(
        field: RequirementField,
        autoFilledValue: Any,
        userValue: Any,
        wasAccepted: Bool,
        formType: FormType,
        context: SmartDefaultContext
    ) async {
        // Enhanced learning for government patterns
        await smartDefaultsEngine.learn(
            field: field,
            suggestedValue: autoFilledValue,
            acceptedValue: userValue,
            wasAccepted: wasAccepted,
            context: context.withGovernmentEnhancements(formType: formType)
        )

        // Track government-specific acceptance patterns
        queue.async(flags: .barrier) {
            if wasAccepted {
                self._governmentMetrics.acceptedCount += 1

                // Boost confidence for similar government field patterns
                if self.isGovernmentCriticalField(field, formType: formType) {
                    self._governmentMetrics.criticalFieldAcceptanceCount += 1
                }

            } else {
                self._governmentMetrics.rejectedCount += 1
                self._governmentMetrics.rejectedFields.insert(field)

                // Learn from government-specific rejection patterns
                if self.isGovernmentCriticalField(field, formType: formType) {
                    self._governmentMetrics.criticalFieldRejectionCount += 1
                }
            }

            self._governmentMetrics.totalFeedbackCount += 1
            self._governmentMetrics.acceptanceRate = Float(self._governmentMetrics.acceptedCount) / Float(self._governmentMetrics.totalFeedbackCount)
        }
    }

    // MARK: - Private Government Methods

    private func makeGovernmentAutoFillDecision(
        field: RequirementField,
        defaultValue: FieldDefault,
        context: SmartDefaultContext,
        formType: FormType,
        config: GovernmentFormConfiguration
    ) -> GovernmentAutoFillDecision {
        var confidence = defaultValue.confidence
        let isCritical = isGovernmentCriticalField(field, formType: formType)
        let isRequired = isGovernmentRequiredField(field, formType: formType, config: config)

        var reasoning = "Based on \(mapSourceToString(defaultValue.source))"
        var validationStatus: GovernmentValidationStatus = .unknown

        // Apply government-specific validation
        let validatedValue = validateGovernmentFieldValue(
            field: field,
            value: defaultValue.value,
            patterns: config.validationPatterns
        )

        confidence = validatedValue.confidence
        validationStatus = validatedValue.status

        if !validatedValue.isValid {
            reasoning += ", validation failed"
            confidence *= 0.6 // Reduce confidence for invalid formats
        }

        // Enhanced confidence adjustments for government forms

        // 1. Government pattern boost
        if isFromGovernmentDocumentContext(context) {
            confidence = min(1.0, confidence + 0.1)
            reasoning += ", government document context"
        }

        // 2. Critical field handling
        if isCritical {
            // Use lower threshold for critical government fields
            if confidence < config.governmentCriticalThreshold {
                reasoning += ", critical field requires higher confidence"
                confidence *= 0.8
            }
        }

        // 3. Required field priority boost
        if isRequired {
            confidence = min(1.0, confidence + 0.05)
            reasoning += ", required field priority"
        }

        // 4. Field-specific validation boost
        switch field {
        case .vendorCAGE:
            if validationStatus == .valid {
                confidence = min(1.0, confidence + 0.1)
                reasoning += ", valid CAGE format"
            }
        case .vendorUEI:
            if validationStatus == .valid {
                confidence = min(1.0, confidence + 0.1)
                reasoning += ", valid UEI format"
            }
        case .estimatedValue, .fundingAmount:
            if validationStatus == .valid {
                confidence = min(1.0, confidence + 0.05)
                reasoning += ", valid currency format"
            }
        default:
            break
        }

        // Determine action based on government thresholds
        let action: GovernmentAutoFillAction
        if isCritical, !configuration.autoFillCriticalFields {
            // Critical fields always require review in government forms
            action = .requiresReview
            reasoning += " (critical government field requires manual review)"
        } else if confidence >= configuration.autoFillThreshold {
            action = .autoFill
        } else if confidence >= configuration.suggestionThreshold {
            action = .suggest
        } else {
            action = .skip
        }

        return GovernmentAutoFillDecision(
            field: field,
            action: action,
            value: validatedValue.processedValue,
            confidence: confidence,
            reasoning: reasoning,
            validationStatus: validationStatus,
            isCriticalField: isCritical
        )
    }

    private func validateGovernmentFieldValue(
        field: RequirementField,
        value: Any,
        patterns: GovernmentValidationPatterns
    ) -> GovernmentFieldValidationResult {
        guard let stringValue = value as? String else {
            return GovernmentFieldValidationResult(
                processedValue: value,
                isValid: false,
                status: .invalid,
                confidence: 0.0
            )
        }

        var isValid = true
        var confidence: Float = 1.0
        var status: GovernmentValidationStatus = .valid
        var processedValue: Any = stringValue

        switch field {
        case .vendorCAGE:
            let trimmedValue = stringValue.trimmingCharacters(in: .whitespacesAndNewlines).uppercased()
            isValid = trimmedValue.range(of: patterns.cageCodePattern, options: .regularExpression) != nil
            processedValue = trimmedValue

            if !isValid {
                status = .invalid
                confidence = 0.3
            } else {
                status = .valid
                confidence = 0.95
            }

        case .vendorUEI:
            let trimmedValue = stringValue.trimmingCharacters(in: .whitespacesAndNewlines).uppercased()
            isValid = trimmedValue.range(of: patterns.ueiPattern, options: .regularExpression) != nil
            processedValue = trimmedValue

            if !isValid {
                status = .invalid
                confidence = 0.3
            } else {
                status = .valid
                confidence = 0.95
            }

        case .contractNumber:
            let trimmedValue = stringValue.trimmingCharacters(in: .whitespacesAndNewlines).uppercased()
            isValid = trimmedValue.range(of: patterns.contractNumberPattern, options: .regularExpression) != nil
            processedValue = trimmedValue

            if !isValid {
                status = .requiresReview
                confidence = 0.6
            } else {
                status = .valid
                confidence = 0.9
            }

        case .estimatedValue, .fundingAmount:
            let trimmedValue = stringValue.trimmingCharacters(in: .whitespacesAndNewlines)
            isValid = trimmedValue.range(of: patterns.currencyPattern, options: .regularExpression) != nil

            // Ensure proper currency format
            if isValid {
                processedValue = formatCurrencyValue(trimmedValue)
                status = .valid
                confidence = 0.9
            } else {
                // Try to auto-correct currency format
                if let correctedValue = attemptCurrencyCorrection(trimmedValue) {
                    processedValue = correctedValue
                    status = .requiresReview
                    confidence = 0.7
                    isValid = true
                } else {
                    status = .invalid
                    confidence = 0.2
                }
            }

        case .requiredDate, .performancePeriodStart, .performancePeriodEnd:
            let trimmedValue = stringValue.trimmingCharacters(in: .whitespacesAndNewlines)
            isValid = trimmedValue.range(of: patterns.datePattern, options: .regularExpression) != nil

            if isValid {
                processedValue = formatDateValue(trimmedValue)
                status = .valid
                confidence = 0.85
            } else {
                status = .requiresReview
                confidence = 0.5
            }

        default:
            // Standard validation for other fields
            processedValue = stringValue.trimmingCharacters(in: .whitespacesAndNewlines)
            status = .valid
            confidence = 0.8
        }

        return GovernmentFieldValidationResult(
            processedValue: processedValue,
            isValid: isValid,
            status: status,
            confidence: confidence
        )
    }

    private func validateAndFilterGovernmentDecisions(
        _ decisions: [GovernmentAutoFillDecision],
        config _: GovernmentFormConfiguration
    ) -> [GovernmentAutoFillDecision] {
        var autoFillCount = 0
        var validatedDecisions: [GovernmentAutoFillDecision] = []

        // Sort by confidence and critical field priority
        let sortedDecisions = decisions.sorted { first, second in
            if first.isCriticalField != second.isCriticalField {
                return first.isCriticalField // Critical fields first
            }
            return first.confidence > second.confidence
        }

        for decision in sortedDecisions {
            var finalDecision = decision

            // Apply government-specific limits
            if decision.action == .autoFill {
                if autoFillCount >= configuration.maxAutoFillFields {
                    // Convert to suggestion if limit reached
                    finalDecision = GovernmentAutoFillDecision(
                        field: decision.field,
                        action: .suggest,
                        value: decision.value,
                        confidence: decision.confidence,
                        reasoning: decision.reasoning + " (auto-fill limit reached)",
                        validationStatus: decision.validationStatus,
                        isCriticalField: decision.isCriticalField
                    )
                } else {
                    autoFillCount += 1
                }
            }

            // Force critical fields to require review
            if finalDecision.isCriticalField, !configuration.autoFillCriticalFields {
                finalDecision = GovernmentAutoFillDecision(
                    field: finalDecision.field,
                    action: .requiresReview,
                    value: finalDecision.value,
                    confidence: finalDecision.confidence,
                    reasoning: finalDecision.reasoning + " (critical field requires manual review)",
                    validationStatus: finalDecision.validationStatus,
                    isCriticalField: true
                )
            }

            validatedDecisions.append(finalDecision)
        }

        return validatedDecisions
    }

    private func buildGovernmentAutoFillResult(
        from decisions: [GovernmentAutoFillDecision],
        formType: FormType,
        startTime: Date,
        config: GovernmentFormConfiguration
    ) -> GovernmentFormAutoFillResult {
        var autoFilledFields: [RequirementField: Any] = [:]
        var suggestedFields: [RequirementField: GovernmentFieldSuggestion] = [:]
        var reviewRequiredFields: [RequirementField: Any] = [:]
        var skippedFields: [RequirementField] = []

        for decision in decisions {
            switch decision.action {
            case .autoFill:
                autoFilledFields[decision.field] = decision.value

            case .suggest:
                suggestedFields[decision.field] = GovernmentFieldSuggestion(
                    value: decision.value,
                    confidence: decision.confidence,
                    reasoning: decision.reasoning,
                    validationStatus: decision.validationStatus,
                    isCritical: decision.isCriticalField
                )

            case .requiresReview:
                reviewRequiredFields[decision.field] = decision.value

            case .skip:
                skippedFields.append(decision.field)
            }
        }

        // Calculate metrics
        let processingTime = Date().timeIntervalSince(startTime)
        let totalFields = decisions.count
        let overallConfidence = decisions.isEmpty ? 0.0 :
            decisions.map(\.confidence).reduce(0, +) / Float(decisions.count)

        // Calculate time savings (government forms typically take longer)
        let estimatedManualTimePerField = 20.0 // seconds for government forms
        let baselineTime = Double(totalFields) * estimatedManualTimePerField
        let actualTimeUsed = Double(skippedFields.count + reviewRequiredFields.count) * estimatedManualTimePerField
        let timeSaved = baselineTime - actualTimeUsed
        let timeReduction = timeSaved / baselineTime

        let summary = GovernmentFormAutoFillSummary(
            totalFields: totalFields,
            autoFilledCount: autoFilledFields.count,
            suggestedCount: suggestedFields.count,
            reviewRequiredCount: reviewRequiredFields.count,
            skippedCount: skippedFields.count,
            averageConfidence: overallConfidence,
            timeSaved: timeSaved,
            timeReduction: timeReduction,
            formType: formType,
            meetsTimeReductionTarget: timeReduction >= config.timeReductionTarget,
            criticalFieldsCount: decisions.count(where: { $0.isCriticalField })
        )

        return GovernmentFormAutoFillResult(
            autoFilledFields: autoFilledFields,
            suggestedFields: suggestedFields,
            reviewRequiredFields: reviewRequiredFields,
            skippedFields: skippedFields,
            summary: summary,
            processingTime: processingTime
        )
    }

    // MARK: - Helper Methods

    private func isGovernmentCriticalField(_ field: RequirementField, formType _: FormType) -> Bool {
        let criticalFields: Set<RequirementField> = [
            .estimatedValue,
            .fundingSource,
            .contractType,
            .vendorUEI,
            .vendorCAGE,
            .fundingAmount,
        ]

        return criticalFields.contains(field)
    }

    private func isGovernmentRequiredField(
        _ field: RequirementField,
        formType: FormType,
        config: GovernmentFormConfiguration
    ) -> Bool {
        config.requiredFieldsByForm[formType]?.contains(field) ?? false
    }

    private func isFromGovernmentDocumentContext(_ context: SmartDefaultContext) -> Bool {
        // Check if context indicates government document source
        let governmentIndicators = ["contract", "solicitation", "cage", "uei", "amendment"]
        return governmentIndicators.contains { indicator in
            context.extractedData.keys.contains { $0.lowercased().contains(indicator) }
        }
    }

    private func formatCurrencyValue(_ value: String) -> String {
        // Ensure proper US dollar format
        var formatted = value
        if !formatted.hasPrefix("$") {
            formatted = "$" + formatted
        }
        return formatted
    }

    private func attemptCurrencyCorrection(_ value: String) -> String? {
        // Try to extract numeric value and format as currency
        let numericString = value.replacingOccurrences(of: "[^\\d.]", with: "", options: .regularExpression)
        if let doubleValue = Double(numericString), doubleValue > 0 {
            let formatter = NumberFormatter()
            formatter.numberStyle = .currency
            formatter.currencyCode = "USD"
            return formatter.string(from: NSNumber(value: doubleValue))
        }
        return nil
    }

    private func formatDateValue(_ value: String) -> String {
        // Ensure consistent MM/DD/YYYY format
        let components = value.components(separatedBy: CharacterSet(charactersIn: "/-"))
        if components.count == 3 {
            let month = String(format: "%02d", Int(components[0]) ?? 0)
            let day = String(format: "%02d", Int(components[1]) ?? 0)
            let year = components[2]
            return "\(month)/\(day)/\(year)"
        }
        return value
    }

    private func updateGovernmentMetrics(with result: GovernmentFormAutoFillResult) {
        queue.async(flags: .barrier) {
            self._governmentMetrics.totalAutoFillCount += result.summary.autoFilledCount
            self._governmentMetrics.totalSuggestionCount += result.summary.suggestedCount
            self._governmentMetrics.totalReviewRequiredCount += result.summary.reviewRequiredCount
            self._governmentMetrics.totalFieldsProcessed += result.summary.totalFields
            self._governmentMetrics.sessionsCount += 1
            self._governmentMetrics.totalTimeSaved += result.summary.timeSaved

            // Update average confidence
            self._governmentMetrics.averageConfidence =
                (self._governmentMetrics.averageConfidence * Float(self._governmentMetrics.sessionsCount - 1) +
                    result.summary.averageConfidence) / Float(self._governmentMetrics.sessionsCount)
        }
    }

    // MARK: - Government Metrics

    public func getGovernmentMetrics() -> GovernmentFormMetrics {
        queue.sync { _governmentMetrics }
    }

    public func resetGovernmentMetrics() {
        queue.async(flags: .barrier) {
            self._governmentMetrics = GovernmentFormMetrics()
        }
    }
}

// MARK: - Government Form Types

/// Enhanced auto-fill decision for government forms
public struct GovernmentAutoFillDecision {
    public let field: RequirementField
    public let action: GovernmentAutoFillAction
    public let value: Any
    public let confidence: Float
    public let reasoning: String
    public let validationStatus: GovernmentValidationStatus
    public let isCriticalField: Bool

    public enum GovernmentAutoFillAction {
        case autoFill
        case suggest
        case requiresReview
        case skip
    }
}

/// Government-specific validation status
public enum GovernmentValidationStatus: String, CaseIterable, Sendable {
    case valid
    case invalid
    case requiresReview = "requires_review"
    case unknown
}

/// Result of government field validation
public struct GovernmentFieldValidationResult {
    public let processedValue: Any
    public let isValid: Bool
    public let status: GovernmentValidationStatus
    public let confidence: Float
}

/// Enhanced field suggestion for government forms
public struct GovernmentFieldSuggestion: @unchecked Sendable {
    public let value: Any
    public let confidence: Float
    public let reasoning: String
    public let validationStatus: GovernmentValidationStatus
    public let isCritical: Bool
}

/// Government form auto-fill result
public struct GovernmentFormAutoFillResult: @unchecked Sendable {
    public let autoFilledFields: [RequirementField: Any]
    public let suggestedFields: [RequirementField: GovernmentFieldSuggestion]
    public let reviewRequiredFields: [RequirementField: Any]
    public let skippedFields: [RequirementField]
    public let summary: GovernmentFormAutoFillSummary
    public let processingTime: TimeInterval
}

/// Government form auto-fill summary with enhanced metrics
public struct GovernmentFormAutoFillSummary {
    public let totalFields: Int
    public let autoFilledCount: Int
    public let suggestedCount: Int
    public let reviewRequiredCount: Int
    public let skippedCount: Int
    public let averageConfidence: Float
    public let timeSaved: TimeInterval
    public let timeReduction: Double // 0.0 to 1.0
    public let formType: FormType
    public let meetsTimeReductionTarget: Bool
    public let criticalFieldsCount: Int

    /// Returns true if meets TDD rubric targets
    public var meetsTDDTargets: Bool {
        let autoFillRate = Double(autoFilledCount) / Double(totalFields)
        return autoFillRate >= 0.9 && timeReduction >= 0.7 && averageConfidence >= 0.85
    }
}

/// Government form metrics tracking
public struct GovernmentFormMetrics: Sendable {
    public var totalAutoFillCount: Int = 0
    public var totalSuggestionCount: Int = 0
    public var totalReviewRequiredCount: Int = 0
    public var totalFieldsProcessed: Int = 0
    public var acceptedCount: Int = 0
    public var rejectedCount: Int = 0
    public var totalFeedbackCount: Int = 0
    public var acceptanceRate: Float = 0
    public var averageConfidence: Float = 0
    public var sessionsCount: Int = 0
    public var totalTimeSaved: TimeInterval = 0
    public var rejectedFields: Set<RequirementField> = []
    public var criticalFieldAcceptanceCount: Int = 0
    public var criticalFieldRejectionCount: Int = 0

    /// Returns true if metrics meet TDD rubric targets
    public var meetsTDDTargets: Bool {
        acceptanceRate >= 0.85 &&
            averageConfidence >= 0.85 &&
            (totalTimeSaved / Double(sessionsCount * 300)) >= 0.7 // 70% time reduction (assuming 5 min baseline)
    }

    public init() {}
}

// MARK: - SmartDefaultContext Extensions

public extension SmartDefaultContext {
    /// Enhance context with government form information
    func withGovernmentEnhancements(formType: FormType) -> SmartDefaultContext {
        var enhancedData = extractedData
        enhancedData["formType"] = formType.rawValue
        enhancedData["isGovernmentForm"] = "true"

        return SmartDefaultContext(
            sessionId: sessionId,
            userId: userId,
            organizationUnit: organizationUnit,
            acquisitionType: acquisitionType,
            extractedData: enhancedData,
            fiscalYear: fiscalYear,
            fiscalQuarter: fiscalQuarter,
            isEndOfFiscalYear: isEndOfFiscalYear,
            daysUntilFYEnd: daysUntilFYEnd,
            autoFillThreshold: autoFillThreshold
        )
    }
}
